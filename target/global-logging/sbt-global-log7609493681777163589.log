[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\drinks\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\drinks\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (AdoptOpenJDK Java 1.8.0_275)
[debug]       Load.loadUnit: plugins took 154.9478ms
[debug]       Load.loadUnit: defsScala took 0.8985ms
[debug] [Loading] Scanning directory C:\Users\drinks\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\drinks\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 40.7713 ms
[debug]           Load.resolveProject(global-plugins) took 82.305ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\drinks\.sbt\1.0\plugins, plugins: List(<none>))) took 176.4138ms
[debug] [Loading] Done in C:\Users\drinks\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 219.6683ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.9391ms
[debug]     Load.loadUnit(file:/C:/Users/drinks/.sbt/1.0/plugins/, ...) took 395.7739ms
[debug]   Load.apply: load took 717.9436ms
[debug]   Load.apply: resolveProjects took 13.6938ms
[debug]   Load.apply: finalTransforms took 102.4527ms
[debug]   Load.apply: config.delegates took 23.5914ms
[debug]   Load.apply: Def.make(settings)... took 720.1347ms
[debug]   Load.apply: structureIndex took 152.3935ms
[debug]   Load.apply: mkStreams took 3.4841ms
[info] loading global plugins from C:\Users\drinks\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4041.5674ms
[debug]           Load.loadUnit: plugins took 32.7778ms
[debug]           Load.loadUnit: defsScala took 0.0152ms
[debug] [Loading] Scanning directory D:\Documents\datasource\project
[debug]             Load.loadUnit: mkEval took 13.2764ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Documents\datasource\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.1217 ms
[info] loading settings for project datasource-build from idea1.sbt ...
[debug]               Load.resolveProject(datasource-build) took 4.7879ms
[debug]             Load.loadTransitive: finalizeProject(Project(id datasource-build, base: D:\Documents\datasource\project, plugins: List(<none>))) took 10.1227ms
[debug] [Loading] Done in D:\Documents\datasource\project, returning: (datasource-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 253.1794ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.039ms
[debug]         Load.loadUnit(file:/D:/Documents/datasource/project/, ...) took 294.1872ms
[debug]       Load.apply: load took 297.2648ms
[debug]       Load.apply: resolveProjects took 0.61ms
[debug]       Load.apply: finalTransforms took 14.4763ms
[debug]       Load.apply: config.delegates took 0.6745ms
[debug]       Load.apply: Def.make(settings)... took 86.675ms
[debug]       Load.apply: structureIndex took 34.2403ms
[debug]       Load.apply: mkStreams took 0.0048ms
[info] loading project definition from D:\Documents\datasource\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 791.9765ms
[debug]     Load.loadUnit: defsScala took 0.0045ms
[debug] [Loading] Scanning directory D:\Documents\datasource
[debug]       Load.loadUnit: mkEval took 0.3118ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Documents\datasource, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.1915 ms
[info] loading settings for project datasource from build.sbt ...
[debug]         Load.resolveProject(datasource) took 53.7867ms
[debug]       Load.loadTransitive: finalizeProject(Project(id datasource, base: D:\Documents\datasource, plugins: List(<none>))) took 64.5507ms
[debug] [Loading] Done in D:\Documents\datasource, returning: (datasource)
[debug]     Load.loadUnit: loadedProjectsRaw took 427.8953ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.8859ms
[debug]   Load.loadUnit(file:/D:/Documents/datasource/, ...) took 1236.7031ms
[debug] Load.apply: load took 1239.4898ms
[debug] Load.apply: resolveProjects took 0.2638ms
[debug] Load.apply: finalTransforms took 47.747ms
[debug] Load.apply: config.delegates took 0.337ms
[debug] Load.apply: Def.make(settings)... took 177.9881ms
[debug] Load.apply: structureIndex took 32.3039ms
[debug] Load.apply: mkStreams took 0.0057ms
[info] set current project to fudan (in build file:/D:/Documents/datasource/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62552 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62552, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to fudan (in build file:/D:/Documents/datasource/)
[debug] > Exec(idea-shell, None, None)
