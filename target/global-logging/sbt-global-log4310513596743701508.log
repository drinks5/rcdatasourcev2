[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\drinks\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\drinks\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (AdoptOpenJDK Java 1.8.0_275)
[debug]       Load.loadUnit: plugins took 147.0549ms
[debug]       Load.loadUnit: defsScala took 0.6762ms
[debug] [Loading] Scanning directory C:\Users\drinks\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\drinks\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 46.2592 ms
[debug]           Load.resolveProject(global-plugins) took 69.9557ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\drinks\.sbt\1.0\plugins, plugins: List(<none>))) took 166.8252ms
[debug] [Loading] Done in C:\Users\drinks\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 210.2411ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5383ms
[debug]     Load.loadUnit(file:/C:/Users/drinks/.sbt/1.0/plugins/, ...) took 372.8252ms
[debug]   Load.apply: load took 698.2166ms
[debug]   Load.apply: resolveProjects took 12.6765ms
[debug]   Load.apply: finalTransforms took 71.5814ms
[debug]   Load.apply: config.delegates took 12.0309ms
[debug]   Load.apply: Def.make(settings)... took 508.6523ms
[debug]   Load.apply: structureIndex took 111.7486ms
[debug]   Load.apply: mkStreams took 4.806ms
[info] loading global plugins from C:\Users\drinks\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4130.5687ms
[debug]           Load.loadUnit: plugins took 21.6089ms
[debug]           Load.loadUnit: defsScala took 0.0042ms
[debug] [Loading] Scanning directory D:\Documents\datasource\project
[debug]             Load.loadUnit: mkEval took 9.1918ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Documents\datasource\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.7486 ms
[info] loading settings for project datasource-build from idea.sbt ...
[debug]               Load.resolveProject(datasource-build) took 3.0733ms
[debug]             Load.loadTransitive: finalizeProject(Project(id datasource-build, base: D:\Documents\datasource\project, plugins: List(<none>))) took 6.4257ms
[debug] [Loading] Done in D:\Documents\datasource\project, returning: (datasource-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2591.7913ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.6723ms
[debug]         Load.loadUnit(file:/D:/Documents/datasource/project/, ...) took 2618.9251ms
[debug]       Load.apply: load took 2620.2825ms
[debug]       Load.apply: resolveProjects took 0.2073ms
[debug]       Load.apply: finalTransforms took 7.9842ms
[debug]       Load.apply: config.delegates took 0.3769ms
[debug]       Load.apply: Def.make(settings)... took 66.5173ms
[debug]       Load.apply: structureIndex took 22.2657ms
[debug]       Load.apply: mkStreams took 0.0036ms
[info] loading project definition from D:\Documents\datasource\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6843.5941ms
[debug]     Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory D:\Documents\datasource
[debug]       Load.loadUnit: mkEval took 0.4028ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Documents\datasource, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5404 ms
[info] loading settings for project datasource from build.sbt ...
[debug]         Load.resolveProject(datasource) took 51.3362ms
[debug]       Load.loadTransitive: finalizeProject(Project(id datasource, base: D:\Documents\datasource, plugins: List(<none>))) took 55.4973ms
[debug] [Loading] Done in D:\Documents\datasource, returning: (datasource)
[debug]     Load.loadUnit: loadedProjectsRaw took 960.1045ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.4074ms
[debug]   Load.loadUnit(file:/D:/Documents/datasource/, ...) took 7809.817ms
[debug] Load.apply: load took 7811.7966ms
[debug] Load.apply: resolveProjects took 0.2219ms
[debug] Load.apply: finalTransforms took 39.2588ms
[debug] Load.apply: config.delegates took 0.4866ms
[debug] Load.apply: Def.make(settings)... took 109.8636ms
[debug] Load.apply: structureIndex took 24.9788ms
[debug] Load.apply: mkStreams took 0.0044ms
[info] set current project to fudan (in build file:/D:/Documents/datasource/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54352 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54352, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to fudan (in build file:/D:/Documents/datasource/)
[debug] > Exec(idea-shell, None, None)
